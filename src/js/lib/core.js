/* 
    Каждый раз когда используем $ будет создавать новый объект.
    Будет запускаться метод init который будет записан в прототипе этой функции
*/
const $ = function(selector) {
    return new $.prototype.init(selector);
}

/* 
    Эта функция будет получать элементы с которыми будем работать
*/
$.prototype.init = function(selector) {
    if(!selector) {
        return this; // {}
    }

    if(selector.tagName) {
        this[0] = selector;
        this.length = 1;
        return this;
    }


    /* 
        метод assign позволяет нам добавлять в объект новые свойства. 1 аргумент это объект куда добавляем, 2 аргумент что мы добавляем 
        1 аргумент объект, будет давать нам индексы(ключи)
        2 аргумент ноды(элементы) которые будут сопоставляться с ключами объекта(1 аргумент) и формировать объект.    
    */
    Object.assign(this, document.querySelectorAll(selector));

    /* С помощью этого свойства теперь мы можем узнать сколько элементов мы получили по данному селектору */
    this.length = document.querySelectorAll(selector).length;

    /* 
        Чтобы использовать методы на объекте(this) нужно вернуть этот объект из функции. Этот приём называется чейнинг.

        Если методов будет много, то в самих методах тоже можно возвращать объект чтобы дальше манипулировать их состояниями.
        Например: obj.hide().show();
    */
    return this;
};

/* 
    У функции init также есть свой прототип, который мы можем перезаписать
    Зачем его переписывать?
    Для того чтобы в прототип объекта возвращаемого из функции init записывался прототип главной функции $
    Это даёт нам главное преимущество.
    Теперь на любом объекте который будет создаваться с помощью функции $, можно использовать любые методы которые будут в прототипе функции init
    Например: 
    1) Добавление классов
    2) Удаление классов
    3) Изменения внутри элементов
    4) и т.д и т.п
*/

$.prototype.init.prototype = $.prototype;


/* 
    Передали функцию в глобальный объект window
    теперь $ является глобальной функцией которую мы можем вызывать по одному символу.
*/
window.$ = $;

export default $;